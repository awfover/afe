#include "stdafx.h"

#include "Aes.h"

#include <assert.h>
#include <fstream>

namespace aes {

	namespace constant {

		const uint32_t RCON[] = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 };

		const uint8_t SBOX[] = {
			0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
			0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
			0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
			0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
			0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
			0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
			0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
			0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
			0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
			0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
			0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
			0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
			0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
			0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
			0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
			0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
		};

		const uint8_t INV_SBOX[] = {
			0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
			0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
			0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
			0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
			0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
			0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
			0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
			0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
			0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
			0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
			0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
			0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
			0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
			0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
			0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
			0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
		};

		const uint8_t XTIME[] = {
			0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
			0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
			0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
			0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
			0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
			0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
			0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
			0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
			0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
			0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
			0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45,
			0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
			0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85,
			0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5,
			0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
			0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5,
		};

	}

	namespace util {

		uint32_t SubDword(uint32_t x) {
			uint32_t r = 0;
			r |= ((uint32_t)aes::constant::SBOX[(uint8_t)((x >> 0) & 0xff)]) << 0;
			r |= ((uint32_t)aes::constant::SBOX[(uint8_t)((x >> 8) & 0xff)]) << 8;
			r |= ((uint32_t)aes::constant::SBOX[(uint8_t)((x >> 16) & 0xff)]) << 16;
			r |= ((uint32_t)aes::constant::SBOX[(uint8_t)((x >> 24) & 0xff)]) << 24;
			return r;
		}

		uint32_t RotDword(uint32_t x) {
			return ((x >> 8) | ((x & 0xff) << 24));
		}

		size_t CalcSize(size_t s) {
			size_t actual_size = s / (4 * aes::constant::AES_NK) * (4 * aes::constant::AES_NK);
			if (s % (4 * aes::constant::AES_NK) > 0) {
				actual_size += 4 * aes::constant::AES_NK;
			}
			return actual_size;
		}

	}

	Key::Key(const std::wstring &cipher) {
		std::string ansi_cipher;
		::util::UnicodeToAnsi(ansi_cipher, cipher);

		auto size = ansi_cipher.size();
		if (size > 4 * constant::AES_NK) {
			size = 4 * constant::AES_NK;
		}

		memcpy_s(_key, size, &ansi_cipher[0], size);
		memset(_key + size, 0, 4 * constant::AES_NK - size);
		KeyExpansion();
	}

	void Key::KeyExpansion() {
		uint32_t *rk = (uint32_t *)_round_keys, t;
		memcpy_s(rk, 4 * constant::AES_NK, _key, 4 * constant::AES_NK);
		for (unsigned int i = constant::AES_NK; i < constant::AES_NB * (constant::AES_NR + 1); i++) {
			t = rk[i - 1];
			if (i % constant::AES_NK == 0) {
				t = util::RotDword(t);
				t = util::SubDword(t);
				t = t ^ constant::RCON[i / constant::AES_NK - 1];
			}
			rk[i] = rk[i - constant::AES_NK] ^ t;
		}
	}

	bool Aes::Encrypt(std::vector<uint8_t> &dout, const std::string &sin) {
		uint8_t din[4 * constant::AES_NK];
		size_t size = sin.size();

		size_t actual_size = util::CalcSize(size);
		dout.resize(actual_size, 0);

		for (size_t i = 0; i < size; i += (4 * constant::AES_NK)) {
			if (i + 4 * constant::AES_NK < size) {
				memcpy_s(din, 4 * constant::AES_NK, &sin[i], 4 * constant::AES_NK);
			}
			else {
				size_t pad_size = size - i;
				memcpy_s(din, pad_size, &sin[i], pad_size);
				memset(din + pad_size, 0, 4 * constant::AES_NK - pad_size);
			}

			if (!Encrypt(&dout[i], din)) {
				return false;
			}
		}

		return true;
	}

	bool Aes::Encrypt(std::string &sout, const std::string &sin) {
		uint8_t din[4 * constant::AES_NK];
		size_t size = sin.size();

		size_t actual_size = util::CalcSize(size);
		sout.resize(actual_size, 0);

		for (size_t i = 0; i < size; i += (4 * constant::AES_NK)) {
			if (i + 4 * constant::AES_NK <= size) {
				memcpy_s(din, 4 * constant::AES_NK, &sin[i], 4 * constant::AES_NK);
			}
			else {
				memcpy_s(din, size - i, &sin[i], size - i);
				memset(din + size - i, 0, 4 * constant::AES_NK - (size - i));
			}

			if (!Encrypt((uint8_t *)&sout[i], din)) {
				return false;
			}
		}

		return true;
	}

	bool Aes::Encrypt(uint8_t *dout, const uint8_t *din) {
		memcpy_s(_state, 4 * constant::AES_NK, din, 4 * constant::AES_NK);
		for (unsigned int i = 0; i <= constant::AES_NR; i++) {
			if (i > 0) {
				SubBytes();
				ShiftRows();
				if (i < constant::AES_NR) {
					MixColumns();
				}
			}
			AddRoundKey(i);
		}

		memcpy_s(dout, 4 * constant::AES_NK, _state, 4 * constant::AES_NK);
		return true;
	}

	void Aes::SubBytes() {
		for (unsigned int i = 0; i < 4 * constant::AES_NB; i++) {
			_state[i] = constant::SBOX[_state[i]];
		}
	}

	void Aes::ShiftRows() {
		uint8_t t[4 * constant::AES_NK];
		memcpy_s(t, 4 * constant::AES_NK, _state, 4 * constant::AES_NK);
		for (unsigned int i = 1; i < 4; i++) {
			for (unsigned int j = 0; j < constant::AES_NB; j++) {
				_state[i + j * 4] = t[i + (j + i) % 4 * 4];
			}
		}
	}

	void Aes::MixColumns() {
		uint8_t s[4], t;
		for (unsigned int i = 0; i < 4 * constant::AES_NB; i += 4) {
			memcpy_s(s, 4, &_state[i], 4);

			t = s[0] ^ s[1] ^ s[2] ^ s[3];
			_state[i] ^= t ^ constant::XTIME[s[0] ^ s[1]];
			_state[i + 1] ^= t ^ constant::XTIME[s[1] ^ s[2]];
			_state[i + 2] ^= t ^ constant::XTIME[s[2] ^ s[3]];
			_state[i + 3] ^= t ^ constant::XTIME[s[3] ^ s[0]];
		}
	}

	bool Aes::Decrypt(std::vector<uint8_t> &dout, const std::string &sin) {
		size_t size = sin.size();
		if (size % (4 * constant::AES_NK) > 0) {
			return false;
		}

		uint8_t din[4 * constant::AES_NK];

		dout.resize(size, 0);
		for (size_t i = 0; i < size; i += (4 * constant::AES_NK)) {
			memcpy_s(din, 4 * constant::AES_NK, &sin[i], 4 * constant::AES_NK);
			if (!Decrypt(&dout[i], din)) {
				return false;
			}
		}

		return true;
	}

	bool Aes::Decrypt(std::string &sout, const std::string &sin) {
		size_t size = sin.size();
		if (size % (4 * constant::AES_NK) > 0) {
			return false;
		}

		uint8_t din[4 * constant::AES_NK];

		sout.resize(size, 0);
		for (size_t i = 0; i < size; i += (4 * constant::AES_NK)) {
			memcpy_s(din, 4 * constant::AES_NK, &sin[i], 4 * constant::AES_NK);
			if (!Decrypt((uint8_t *)&sout[i], din)) {
				return false;
			}
		}

		return true;
	}

	bool Aes::Decrypt(uint8_t *dout, const uint8_t *din) {
		memcpy_s(_state, 4 * constant::AES_NK, din, 4 * constant::AES_NK);
		for (int i = constant::AES_NR; i >= 0; i--) {
			AddRoundKey(i);
			if (i > 0) {
				if (i < constant::AES_NR) {
					InvMixColumns();
				}
				InvShiftRows();
				InvSubBytes();
			}
		}

		memcpy_s(dout, 4 * constant::AES_NK, _state, 4 * constant::AES_NK);
		return true;
	}

	void Aes::InvSubBytes() {
		for (unsigned int i = 0; i < 4 * constant::AES_NB; i++) {
			_state[i] = constant::INV_SBOX[_state[i]];
		}
	}

	void Aes::InvShiftRows() {
		uint8_t t[4 * constant::AES_NK];
		memcpy_s(t, 4 * constant::AES_NK, _state, 4 * constant::AES_NK);
		for (unsigned int i = 1; i < 4; i++) {
			for (unsigned int j = 0; j < constant::AES_NB; j++) {
				_state[i + j * 4] = t[i + (j - i + 4) % 4 * 4];
			}
		}
	}

	void Aes::InvMixColumns() {
		using namespace constant;

		uint8_t s[4], t, xt, t1, t2;
		for (unsigned int i = 0; i < 4 * AES_NB; i += 4) {
			memcpy_s(s, 4, &_state[i], 4);

			t = s[0] ^ s[1] ^ s[2] ^ s[3];
			xt = XTIME[t];
			t1 = XTIME[XTIME[xt ^ s[0] ^ s[2]]] ^ t;
			t2 = XTIME[XTIME[xt ^ s[1] ^ s[3]]] ^ t;
			_state[i] ^= t1 ^ XTIME[s[0] ^ s[1]];
			_state[i + 1] ^= t2 ^ XTIME[s[1] ^ s[2]];
			_state[i + 2] ^= t1 ^ XTIME[s[2] ^ s[3]];
			_state[i + 3] ^= t2 ^ XTIME[s[3] ^ s[0]];
		}
	}

	void Aes::AddRoundKey(unsigned int round) {
		uint32_t *s = (uint32_t *)_state;
		for (unsigned int i = 0; i < constant::AES_NB; i++) {
			s[i] ^= (*_key)[round * constant::AES_NB + i];
		}
	}

}
